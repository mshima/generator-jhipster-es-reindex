package <%- packageName %>.config;

import jakarta.persistence.EntityManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionTemplate;

@Component
public class ElasticsearchReindexer implements ApplicationListener<ContextRefreshedEvent> {

    private final Logger log = LoggerFactory.getLogger(ElasticsearchReindexer.class);

    @Value("${application.elasticsearch-reindexer:false}")
    Boolean enableReindexer;

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        if (Boolean.FALSE.equals(enableReindexer)) {
            log.info("Elasticsearch check skipped");
            return;
        }
        log.info("Checking Elasticsearch indexes");
        var applicationContext = event.getApplicationContext();
        for (EsEntity entity : EsEntity.values()) {
            reindex(applicationContext, entity);
        }
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    private void reindex(ApplicationContext applicationContext, EsEntity entity) {
        if (entity == EsEntity.ReindexerPlaceEndHolder) {
            return;
        }

        JpaRepository repository = (JpaRepository) applicationContext.getBean(entity.repositoryClass);
        ElasticsearchRepository esRepository = (ElasticsearchRepository) applicationContext.getBean(entity.esRepositoryClass);
        if (repository.count() > esRepository.count()) {
            var transactionManager = applicationContext.getBean("transactionManager", PlatformTransactionManager.class);
            applicationContext
                .getBean(EntityManager.class)
                .createQuery("select p." + entity.pkField + " from " + entity.name() + " p")
                .getResultList()
                .forEach(id -> {
                    if (!esRepository.existsById(id)) {
                        new TransactionTemplate(transactionManager).execute(status -> {
                            log.info("Reindexing entity {} with id {}", entity.name(), id);
                            esRepository.save(repository.findById(id).orElseThrow());
                            return status;
                        });
                    }
                });
        }
    }

    private static enum EsEntity {
        // jhipster-needle-elasticsearch-reindex-add-entity - JHipster will add entities to the reindexer here
        ReindexerPlaceEndHolder(null, null, null);

        public final String pkField;

        public final Class<?> repositoryClass;

        public final Class<?> esRepositoryClass;

        private EsEntity(
            final String pkField,
            final Class<?> repositoryClass,
            final Class<?> esRepositoryClass
        ) {
            this.pkField = pkField;
            this.repositoryClass = repositoryClass;
            this.esRepositoryClass = esRepositoryClass;
        }
    }
}
